const loanAmountInput = document.getElementById("loan-amount");
const loanTermButtons = document.querySelectorAll(".loan-term button");
const repaymentTabs = document.querySelectorAll(".repayment-tabs button");
const interestSlider = document.getElementById("interest-slider");
const loanTypeButtons = document.querySelectorAll(".loan-type button");

const repaymentValue = document.getElementById("repayment-value");
const repaymentFrequency = document.getElementById("repayment-frequency");
const totalInterest = document.getElementById("total-interest");
const totalRepayments = document.getElementById("total-repayments");
const interestRateDisplay = document.getElementById("interest-rate");

let loanAmount = parseFloat(loanAmountInput.value);
let loanTerm = 2; // Default to 2 years
let interestRate = 16; // Default to Fixed Rate Loan (16%)
let frequency = "weekly"; // Default frequency

function calculateRepayments() {
  const annualRate = interestRate / 100;
  let paymentsPerYear;

  // Determine the number of payments per year based on frequency
  if (frequency === "weekly") {
    paymentsPerYear = 52;
  } else if (frequency === "fortnightly") {
    paymentsPerYear = 26;
  } else if (frequency === "monthly") {
    paymentsPerYear = 12;
  }

  const totalPayments = loanTerm * paymentsPerYear;
  const periodicRate = annualRate / paymentsPerYear;

  // Calculate repayment amount using the annuity formula
  const repayment = (loanAmount * periodicRate) / (1 - Math.pow(1 + periodicRate, -totalPayments));

  const totalRepayment = repayment * totalPayments;
  const totalInterestPaid = totalRepayment - loanAmount;

  // Update the UI with the calculated values, rounded to the nearest whole number
  repaymentValue.textContent = Math.round(repayment);
  totalInterest.textContent = Math.round(totalInterestPaid);
  totalRepayments.textContent = Math.round(totalRepayment);
}

function updateSliderBackground() {
  const value = interestSlider.value;
  const min = interestSlider.min;
  const max = interestSlider.max;

  // Calculate the percentage of the slider that has been slid over
  const percentage = ((value - min) / (max - min)) * 100;

  // Update the slider's background with a gradient
  interestSlider.style.background = `linear-gradient(to right, #a6fcc6 ${percentage}%, #fff ${percentage}%)`;
}

function updateInterestRate(newRate, minRange, maxRange) {
  interestRate = newRate;
  interestSlider.min = minRange; // Update the slider's minimum value
  interestSlider.max = maxRange; // Update the slider's maximum value
  interestSlider.value = newRate; // Update the slider's position
  interestRateDisplay.textContent = `${newRate.toFixed(2)}%`; // Update the displayed interest rate
  updateSliderBackground(); // Update the slider's background
  calculateRepayments(); // Recalculate repayments
}

// Add event listeners to loan type buttons
loanTypeButtons.forEach((button) => {
  button.addEventListener("click", () => {
    // Remove the "active" class from all buttons
    loanTypeButtons.forEach((btn) => btn.classList.remove("active"));

    // Add the "active" class to the clicked button
    button.classList.add("active");

    // Update the interest rate and slider range based on the selected loan type
    if (button.textContent === "Fixed Rate Loan") {
      updateInterestRate(16, 8, 20); // Fixed Rate Loan: 16%, range 8% to 20%
    } else if (button.textContent === "Variable Rate Loan") {
      updateInterestRate(15, 8, 20); // Variable Rate Loan: 15%, range 8% to 20%
    } else if (button.textContent === "Secured Personal Loan") {
      updateInterestRate(8.49, 6, 10.99); // Secured Personal Loan: 8.49%, range 6% to 10.99%
    }
  });
});

loanAmountInput.addEventListener("input", (e) => {
  loanAmount = parseFloat(e.target.value);
  calculateRepayments();
});

loanTermButtons.forEach((button) => {
  button.addEventListener("click", () => {
    loanTermButtons.forEach((btn) => btn.classList.remove("active"));
    button.classList.add("active");
    loanTerm = parseInt(button.dataset.years);
    calculateRepayments();
  });
});

repaymentTabs.forEach((tab) => {
  tab.addEventListener("click", () => {
    repaymentTabs.forEach((btn) => btn.classList.remove("active"));
    tab.classList.add("active");
    frequency = tab.dataset.frequency;
    repaymentFrequency.textContent = frequency.charAt(0).toUpperCase() + frequency.slice(1);
    calculateRepayments();
  });
});

interestSlider.addEventListener("input", (e) => {
  interestRate = parseFloat(e.target.value);
  interestRateDisplay.textContent = `${interestRate.toFixed(2)}%`;
  calculateRepayments();
  updateSliderBackground(); // Update the slider's color
});

// Initialize the slider background and calculations on page load
updateSliderBackground();
calculateRepayments();





// Modal functionality
const loanInfoBtn = document.getElementById("loan-info-btn");
const modal = document.getElementById("loan-info-modal");
const closeBtn = document.querySelector(".close-btn");
const okBtn = document.querySelector(".pop-up-ok-button");
const body = document.body;

loanInfoBtn.addEventListener("click", () => {
  modal.style.display = "block"; // Show the modal
  body.classList.add("no-scroll"); // Disable background scrolling
});

closeBtn.addEventListener("click", () => {
  modal.style.display = "none"; // Hide the modal
  body.classList.remove("no-scroll"); // Enable background scrolling
});

okBtn.addEventListener("click", () => {
  modal.style.display = "none"; // Hide the modal
  body.classList.remove("no-scroll"); // Enable background scrolling
});


window.addEventListener("click", (e) => {
  if (e.target === modal) {
    modal.style.display = "none"; // Close modal if clicking outside content
    body.classList.remove("no-scroll"); // Enable background scrolling
  }
});

// Dropdown functionality
const dropdowns = document.querySelectorAll(".dropdown");

dropdowns.forEach((dropdown) => {
  const btn = dropdown.querySelector(".dropdown-btn");
  const content = dropdown.querySelector(".dropdown-content");

  btn.addEventListener("click", () => {
    const isActive = dropdown.classList.contains("active");

    // Close all other dropdowns
    dropdowns.forEach((d) => {
      d.classList.remove("active");
      d.querySelector(".dropdown-content").style.height = "0";
    });

    if (!isActive) {
      dropdown.classList.add("active");
      content.style.height = `${content.scrollHeight}px`; // Smoothly expand to content height
    } else {
      dropdown.classList.remove("active");
      content.style.height = "0"; // Smoothly collapse
    }
  });
});

// Prevent modal scroll events from propagating to the background
modal.addEventListener("wheel", (e) => {
  e.stopPropagation();
});
